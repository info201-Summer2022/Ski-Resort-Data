Sys.setenv()
Sys.getlocale()
Sys.getlocale
Sys.setlocale
Sys.setlocale()
Sys.setlocale("LC_ALL","English")
Sys.setlocale("English")
Sys.setlocale("LC_ALL", "En")
Sys.setlocale("LC_MESSAGES", 'en_GB.UTF-8')
Sys.setenv(LANG = "en_US.UTF-8")
q
Sys.getlocale()
source("~/wsy/Lec03.R")
age <- 20
source("~/wsy/Lec03.R")
age <- 20
height <- "5'4"
height <- "5'4"
height <- "5'4"
height <- "5'4"
height <- "5'4"
height <- "5'4"
height <- "5'4"
name <- "Letitia Wang"
source("~/wsy/Lec03.R")
source("~/wsy/Lec03.R")
source("~/wsy/Lec03.R")
source("~/wsy/Lec03.R")
# Lets test the function
mad_libs("Allen", "typing","snakes","lovely")
# Lets test the function
mad_libs("Allen", "typing","snakes","lovely")
source("~/wsy/Lec03.R")
source("~/wsy/Lec03.R")
source("~/wsy/Lec03.R")
source("~/wsy/Lec03.R")
source("~/wsy/Lec03.R")
source("~/wsy/Lec03.R")
source("~/wsy/Lec03.R")
source("~/wsy/Lec03.R")
source("~/wsy/Lec03.R")
print(printf("$",cost))
print(sprintf("$",cost))
cost = 0.99 * cans
source("~/lab03.R")
total_cost(2)
print(sprintf("$"+cost))
total_cost(2)
total_cost(2)
total_cost(2)
total_cost(2)
source("~/lab03.R")
total_cost(2)
total_cost <- function(cans){
cost = 0.99 * cans
print("$",cost)
}
total_cost(2)
total_cost(2)
total_cost(2)
source("~/lab03.R")
cat("$",cost)
total_cost <- function(cans){
cost = 0.99 * cans
cat("$",cost)
}
total_cost(2)
Albert Wang & Letitia Wang
num_of_dishes <- function(fruit, bread, soup){
fruit_num = fruit / 2
bread_num = bread / 2
soup_num = soup / 2
return(min(fruit_num, bread_num, soup_num))
}
num_of_dishes(3,5,7)
num_of_dishes <- function(fruit, bread, soup){
fruit_num = div(fruit, 2)
bread_num = div(bread, 2)
soup_num = div(soup, 2)
return(min(fruit_num, bread_num, soup_num))
}
num_of_dishes(3,5,6)
num_of_dishes <- function(fruit, bread, soup){
fruit_num = as.integer(fruit / 2)
bread_num = as.integer(bread / 3)
soup_num = as.integer(soup / 1)
return(min(fruit_num, bread_num, soup_num))
}
num_of_dishes(3,5,7)
num_of_dishes(4,5,7)
num_of_dishes(4,6,8)
source("~/lab03.R")
pet_food_cost(4,6,9)
pet_food_cost(4,6,9)
source("~/lab03.R")
pet_food_cost(2,1,1)
pet_food_cost <- function(dogs, cats, rabbits){
dogs_cost = dogs * 60
cats_cost = cats * 50
rabbits_cost = rabbits * 35
cost = (dogs_cost + cats_cost + rabbits_cost)*12
cat("$",cost)
}
source("~/a2---data-science-foundations-LetitiaW13/analysis.R")
source("~/a2---data-science-foundations-LetitiaW13/analysis.R")
by_month_table
by_month_table_2019 <- table(months(in_2019))
july_2019 <- by_month_table_2019["July"]
july_2020 <- by_month_table["July"]
change_july_protests <- july_2020 - july_2019
source("~/a2---data-science-foundations-LetitiaW13/analysis.R")
time_span
change_july_protests
change_july_protests <- change_july_protests(out)[["July"]]
by_month_table_2019 <- table(months(in_2019))
july_2019 <- by_month_table_2019["July"]
july_2020 <- by_month_table["July"]
change_july_protests <- july_2020 - july_2019
change_july_protests <- change_july_protests(out)[["July"]]
by_month_table_2019 <- table(months(in_2019))
july_2019 <- by_month_table_2019["July"]
july_2020 <- by_month_table["July"]
change_july_protests <- july_2020 - july_2019
names(change_july_protests) <- NULL
change_july_protests
purpose <- select(protests, Event..legacy..see.tags.)
num_purposes <- length(unique(purpose$Event..legacy..see.tags.))
View(purpose)
View(purpose)
high_level_purpse <- gsub("(.*$","",purpose$Event..legacy..see.tags.)
high_level_purpse <- strsplit(purpose$Event..legacy..see.tags.,"[(]")
View(high_level_purpse)
View(high_level_purpse)
high_level_purpse
high_level_purpse <- sub(" (.*","",purpose$Event..legacy..see.tags.)
high_level_purpse <- sub(" (.*)","",purpose$Event..legacy..see.tags.)
high_level_purpse
high_level_purpse <- sub("(.*)","",purpose$Event..legacy..see.tags.)
high_level_purpse
high_level_purpse <- sub(" (.*)","",purpose$Event..legacy..see.tags.)
high_level_purpse
high_level_purpse <- sub("(.*","",purpose$Event..legacy..see.tags
)
high_level_purpse <- sub("\\(.*","",purpose$Event..legacy..see.tags.)
high_level_purpse
high_level_purpse <- sub("\\ (.*","",purpose$Event..legacy..see.tags.)
high_level_purpse <- sub("\\(.*","",purpose$Event..legacy..see.tags.)
str_trim(high_level_purpse)
num_high_level <- length(unique(high_level_purpse))
num_high_level
high_level_table <- table(high_level_purpse)
high_level_table
high_level_purpse <- str_trim(high_level_purpse)
num_high_level <- length(unique(high_level_purpse))
# Create a table that counts the number of protests for each high level purpose
# `high_level_table`
high_level_table <- table(high_level_purpse)
high_level_table
num_high_level
View(high_level_table)
View(high_level_table)
count_high_level_purpose <- function(purs){
count_purs <- high_level_table[purs]
names(count_purs) <- NULL
print(paste0("There are ", count_purs, " protests has high level purpose as ", purs,"."))
}
# test case
count_high_level_purpose("Civil Rights")
View(high_level_table)
change_july_protests
View(protests)
View(protests)
View(protests)
library(usmap)
library(ggplot2)
plot_usmap()
plot_usmap(regions = "counties")
plot_usmap(regions = "counties", include = c("WA", "GA", "AL"))
my_data = data("statemap")
plot_usmap()
my_data = data("statepop")
my_data = data("statepop")
plot_usmap()
force(statepop)
my_data = data("statepop")
plot_usmap(data = statepop, values = "pop_2015")
source("~/wsy/8:1 example.R")
View(statepop)
View(statepop)
install.packages("shiny")
shiny::runApp('wsy')
runApp('wsy')
runApp('wsy')
runApp('wsy')
runApp('wsy')
runApp('wsy')
runApp('wsy')
runApp('wsy')
runApp('wsy')
runApp('wsy')
runApp('wsy')
runApp('wsy')
runApp('wsy')
runApp('wsy')
runApp('wsy')
runApp('wsy')
runApp('wsy')
runApp('wsy')
runApp('wsy')
runApp('wsy')
runApp('wsy')
runApp('wsy')
runApp('wsy')
runApp('wsy')
runApp('wsy')
runApp('wsy')
runApp('wsy')
runApp('wsy')
runApp('wsy')
shiny::runApp('Giggling-Dinasours')
runApp('Giggling-Dinasours')
runApp('Downloads/app1.r')
runApp('wsy/Su22/INFO201/app1.r')
runApp('wsy/Su22/INFO201')
runApp('Giggling-Dinasours')
runApp('Giggling-Dinasours')
runApp('Giggling-Dinasours')
runApp('Giggling-Dinasours')
runApp('Downloads/app1.r')
runApp('Downloads/app-1.R')
runApp('Giggling-Dinasours')
european_df <- read.csv("data/European_Ski_Resorts.csv")
setwd("~/Giggling-Dinasours")
european_df <- read.csv("data/European_Ski_Resorts.csv")
ski_df <- read.csv("data/Ski_resort.csv")
european_df <- select(european_df, resort, country, DayPassPriceAdult, TotalSlope)
european_df <- read.csv("data/European_Ski_Resorts.csv")
ski_df <- read.csv("data/Ski_resort.csv")
european_df <- select(european_df, Resort, country, DayPassPriceAdult, TotalSlope)
european_df <- read.csv("data/European_Ski_Resorts.csv")
ski_df <- read.csv("data/Ski_resort.csv")
european_df <- select(european_df, Resort, Country, DayPassPriceAdult, TotalSlope)
european_df <- read.csv("data/European_Ski_Resorts.csv")
ski_df <- read.csv("data/Ski_resort.csv")
european_df <- select(european_df, Resort, Country, DayPassPriceAdult, TotalSlope)
View(european_df)
runApp()
runApp()
runApp('~/Downloads/app (1).r')
runApp('~/wsy/Su22/INFO201/lec-8.15')
runApp('~/wsy/Su22/INFO201/lec-8.15')
runApp()
setwd("~/Giggling-Dinasours")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(ski_df)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ski_df <- select(ski_df, Type, Date_of_purchase, Acquisition_mode, Hotel, Total_price)
View(ski_df)
runApp()
length[input$date]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(stringr)
runApp()
runApp()
runApp()
runApp()
runApp()
library(dplyr)
library(ggplot2)
data_df <- read.csv("Ski_resort.csv")
package_diff <- (sum(package_df$Total_price) - sum(package_df$Selling_price)) / num_package
library(dplyr)
library(ggplot2)
data_df <- read.csv("Ski_resort.csv")
setwd("~/Giggling-Dinasours/exploratory_data_analysis/charts")
library(dplyr)
library(ggplot2)
data_df <- read.csv("Ski_resort.csv")
num_row <- nrow(data_df)
package_df <- filter(data_df, Acquisition_mode == "Package")
package_diff <- (sum(package_df$Total_price) - sum(package_df$Selling_price)) / num_package
runApp('~/Giggling-Dinasours')
runApp('~/Giggling-Dinasours')
runApp('~/Giggling-Dinasours')
runApp('~/Giggling-Dinasours')
runApp('~/Giggling-Dinasours')
library(dplyr)
library(ggplot2)
bought_in_df <- read.csv("Ski_resort.csv")
ggplot(bought_in_df, aes(x=Selling_price, y=Total_price)) +
geom_point(colour = 4) +
labs(title = "Comparison between Selling Price and Total Price")
# I include this chart to show how would the selling price compare with total price so that the audiences would have an understanding on the relationship
# between what strategies the sellers would want to apply when they boost up the ticket price in total.
# It reveals the fact that the sellers would not give up interests they could get for an exchange of higher skier population buying tickets, which means
# it is hard to see huge bump-ups for a particular strategy of tickets when the total ticket prices go up or go down.
runApp('~/Giggling-Dinasours')
runApp('~/Giggling-Dinasours')
library(hrbrthemes)
runApp('~/Giggling-Dinasours')
runApp('~/Giggling-Dinasours')
ski_df <- select(ski_df, Type, Date_of_purchase, Acquisition_mode, Selling_price, Total_price)
ski_df <- read.csv("data/Ski_resort.csv")
setwd("~/Giggling-Dinasours")
runApp()
ski_df <- read.csv("data/Ski_resort.csv")
ski_df <- select(ski_df, Type, Date_of_purchase, Acquisition_mode, Selling_price, Total_price)
View(ski_df)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
